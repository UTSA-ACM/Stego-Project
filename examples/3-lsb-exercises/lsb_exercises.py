# -*- coding: utf-8 -*-
"""lsb-exercises.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YiuWBlZcp-D5h9jHoSQOR6jZiGi8TeLC
"""

import hashlib

def get_md5(s):
  if type(s) == str:
    s = s.lower().encode("utf-8")
  return hashlib.md5(s).hexdigest()

def check_answer(answer, correct_answers):
  if get_md5(answer) in correct_answers:
    return True
  else:
    return False

# Question 1

# What is the name of the image processing library?
YOUR_ANSWER = "pil"


if check_answer(YOUR_ANSWER, ["ab2ab0c96779da22386813b039f0e4ae", "028dbbfa273d4b792baf487492f43a5d"]):
  print("Correct")
else:
  print("Try again")

# Question 2

# What is the name of the bit manipulation library?
YOUR_ANSWER = "bitarray"

if check_answer(YOUR_ANSWER, ["76d20ecc835b356b2ae02401e14f7737"]):
  print("Correct")
else:
  print("Try again")

# Here's all of the stuff you'll need for the rest of the exercises
# (just upload the white 4x4)
!pip install bitarray
from PIL import Image
from bitarray import bitarray
from google.colab import files

uploaded = files.upload()



# Question 3
# Try modifying this color value to be 103
# Remember you can modify the first value in a list like this: "my_list[0] = new_val"
# Remember or modify the last value in a list like this: "my_list[-1] = new_val"

color = 100
ba = bitarray(format(color, "08b"))
print(ba)

my_list = [1,2,3]
my_list[0] = 4

if check_answer(ba, ["b2f5ff47436671b6e533d8dc3614845d"]):
  print("Correct!")
else:
  print("False")

# Question 4
# Try to convert that bitarray back into an integer
# NOTE: this is pretty obscure, so here's the steps
# 1. convert bitarray to bytes
# 2. create a new integer from bytes (big endian)
YOUR_INT = 0

if YOUR_INT == 103:
  print("Correct")
else:
  print("False")

# Question 5
# Get the list of image data
# NOTE: should all be (255,255,255)
# NOTE: you can turn something into a list by doing "list(to_be_list)"
OLD_FILE = "white-4-by-4.png"

img = Image.open(OLD_FILE)

IMAGE_PIXELS = []

for pixel in IMAGE_PIXELS:
  if pixel != (255,255,255,255):
    print("False")
    break
print("Correct")



# HINT: the Image.get_data() function could be helpful

# Question 6
# Combine everything to do the following:
# 1. Iterate over image pixels
# 2. Convert pixels into bitarrays
# 3. Modify the bitarrays however you want
# 4. Turn them back into pixels
# 5. Put them back into the image

# HINT: use these for putting data back into the image
# img.putdata(), takes a list of new pixels like:
#   [(255,255,0),(255,255,0)]
# img.show()